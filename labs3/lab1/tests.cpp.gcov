        -:    0:Source:tests.cpp
        -:    0:Programs:4
        -:    1:#include "include/gtest/gtest.h"
        -:    2:#include "hash.h"
        -:    3:
        -:    4://g++ -Lgtestbuild -I./include tests.cpp main.cpp input.cpp hash.cpp -lgtest
        -:    5: 
        1:    6:TEST (HashTests, EqualityOp)
        -:    7:{
    #####:    8:	HashTable ht1;
    #####:    9:	HashTable ht2;
    #####:   10:	EXPECT_TRUE(ht1 == ht2);
    #####:   11:	Value temp1 = {1, 1};
    #####:   12:	ht1.insert("qwe", temp1);
    #####:   13:	ht2.insert("qwe", temp1);
    #####:   14:	EXPECT_TRUE(ht1 == ht2);
    #####:   15:	ht1.insert("asd", temp1);
    #####:   16:	ht2.insert("zxc", temp1);
    #####:   17:	EXPECT_TRUE(ht1 != ht2);
    #####:   18:	EXPECT_FALSE(ht1 == ht2);
    #####:   19:}
        -:   20:
        1:   21:TEST (HashTests, Erase)
        -:   22:{
    #####:   23:	HashTable ht;
    #####:   24:	Value temp = {1, 1};
    #####:   25:	ht.insert("qwe", temp);
    #####:   26:	ASSERT_FALSE(ht.empty());
    #####:   27:	EXPECT_TRUE(ht.search("qwe"));
    #####:   28:	ht.erase("qwe");
    #####:   29:	EXPECT_TRUE(ht.empty());
    #####:   30:	EXPECT_FALSE(ht.search("qwe"));
        -:   31:}
        -:   32:
        1:   33:TEST (HashTests, GetHash)
        -:   34:{
    #####:   35:	Key k = "eargaergvaefvawevajjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjkjhkjguyfcytcttt1777777777777777777wefwavwfevawefawefvavregvtgvarvgawevef";
    #####:   36:	HashTable ht;
    #####:   37:	int hash = ht.gethash(k);
    #####:   38:	ASSERT_FALSE(hash < 0);
    #####:   39:	ASSERT_FALSE(hash >= ht.getcapacity());
        -:   40:}
        -:   41:
        1:   42:TEST (HashTests, Constructor)
        -:   43:{
    #####:   44:	HashTable * pht = new HashTable;
    #####:   45:	ASSERT_FALSE(pht->getcapacity() <= 0);
    #####:   46:	EXPECT_TRUE(pht->getsize() == 0);
    #####:   47:	EXPECT_TRUE(pht->empty());
    #####:   48:	Value temp = {1, 1};
    #####:   49:	pht->insert("qwe", temp);
    #####:   50:	HashTable ht = *pht;
    #####:   51:	ASSERT_FALSE(pht->getcapacity() <= 0);
    #####:   52:	EXPECT_FALSE(ht.empty());
    #####:   53:	EXPECT_FALSE(pht->getsize() == 0);
    #####:   54:	ht.erase("qwe");
    #####:   55:	EXPECT_TRUE(ht.empty());
    #####:   56:	delete pht;
        -:   57:}
        -:   58:
        1:   59:TEST (HashTests, Insert)
        -:   60:{
    #####:   61:	HashTable ht;
    #####:   62:	Value temp = {1, 1};
    #####:   63:	bool check = ht.insert("qwe", temp);
    #####:   64:	EXPECT_TRUE(check);
    #####:   65:	EXPECT_FALSE(ht.empty());
    #####:   66:	EXPECT_TRUE(ht.search("qwe"));
    #####:   67:	check = ht.insert("qwe", temp);
    #####:   68:	EXPECT_FALSE(check);
    #####:   69:	check = ht.insert("abc", temp);
    #####:   70:	EXPECT_TRUE(check);
        -:   71:
        -:   72:	/*for (int i = 0; i < 50; ++i)
        -:   73:	{
        -:   74:		std::cout << "OK";
        -:   75:		std::string s;
        -:   76:		ht.insert(c, temp);
        -:   77:	}*/
    #####:   78:}
        -:   79:
        1:   80:TEST (HashTests, IndexOp)
        -:   81:{
    #####:   82:	HashTable ht;
    #####:   83:	Value check = ht["qwe"];
    #####:   84:	EXPECT_EQ(check.age, -1);
    #####:   85:	EXPECT_EQ(check.weight, -1);
    #####:   86:	Value temp = {1, 1};
    #####:   87:	ht.insert("qwe", temp);
    #####:   88:	check = ht["qwe"];
    #####:   89:	EXPECT_NE(check.age, -1);
    #####:   90:	EXPECT_NE(check.weight, -1);
        3:   91:}
