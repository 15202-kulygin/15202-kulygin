        -:    0:Source:hash.cpp
        -:    0:Programs:4
        -:    1:#include "hash.h"
        -:    2:
        -:    3:using namespace std;
        -:    4:
function _ZNK9HashTable7gethashENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 485376 returned 100% blocks executed 100%
   485376:    5:int HashTable::gethash(Key key) const
   485376:    5-block  0
        -:    6:{
   485376:    7:    char * str = (char *)key.c_str();
   485376:    7-block  0
call    0 returned 485376
   485376:    8:    unsigned int result = 0;
 28605402:    9:    for (int i = 0; i < key.length(); ++i) 
unconditional  0 taken 485376
 28605402:    9-block  0
call    1 returned 28605402
branch  2 taken 28120026 (fallthrough)
branch  3 taken 485376
 28120026:    9-block  1
unconditional  4 taken 28120026
 28120026:   10:        result = (result * 31) ^ str[i];
   485376:   11:    return result%capacity;  
   485376:   11-block  0
unconditional  0 taken 485376
        -:   12:}
function _ZNK9HashTable8get_dataEv called 0 returned 0% blocks executed 0%
    #####:   13:Table * HashTable::get_data() const
    $$$$$:   13-block  0
        -:   14:{
    #####:   15:    return table;
    $$$$$:   15-block  0
unconditional  0 never executed
        -:   16:}
function _ZN9HashTableC2Ev called 13 returned 100% blocks executed 57%
       13:   17:HashTable::HashTable()
       13:   17-block  0
        -:   18:{
       13:   19:    size = 0;
       13:   20:    capacity = START_CAPACITY;
       65:   21:    table = new Table[capacity];
       13:   21-block  0
branch  0 taken 13 (fallthrough)
branch  1 taken 0
       13:   21-block  1
unconditional  2 taken 13
    $$$$$:   21-block  2
unconditional  3 never executed
       13:   21-block  3
call    4 returned 13
branch  5 taken 13 (fallthrough)
branch  6 taken 0 (throw)
       13:   21-block  4
unconditional  7 taken 13
       65:   21-block  5
branch  8 taken 52 (fallthrough)
branch  9 taken 13
       52:   21-block  6
call   10 returned 52
branch 11 taken 52 (fallthrough)
branch 12 taken 0 (throw)
       52:   21-block  7
unconditional 13 taken 52
    %%%%%:   21-block  8
unconditional 14 never executed
    %%%%%:   21-block  9
branch 15 never executed
branch 16 never executed
    %%%%%:   21-block 10
call   17 never executed
unconditional 18 never executed
    %%%%%:   21-block 11
unconditional 19 never executed
    %%%%%:   21-block 12
call   20 never executed
unconditional 21 never executed
       26:   22:    Table to_fill;
       13:   22-block  0
call    0 returned 13
branch  1 taken 13 (fallthrough)
branch  2 taken 0 (throw)
       13:   22-block  1
call    3 returned 13
branch  4 taken 13 (fallthrough)
branch  5 taken 0 (throw)
    %%%%%:   22-block  2
call    6 never executed
unconditional  7 never executed
       13:   23:    to_fill.is_filled = false;
       13:   24:    to_fill.key = " ";
       13:   24-block  0
call    0 returned 13
branch  1 taken 13 (fallthrough)
branch  2 taken 0 (throw)
       13:   25:    to_fill.value.age = -1;
       13:   26:    to_fill.value.weight = -1;
       13:   27:    std::fill(table, table + capacity, to_fill); 
       13:   27-block  0
call    0 returned 13
branch  1 taken 13 (fallthrough)
branch  2 taken 0 (throw)
       13:   28:}
       13:   28-block  0
unconditional  0 taken 13
    %%%%%:   28-block  1
branch  1 never executed
branch  2 never executed
        -:   29:
function _ZN9HashTableC2ERKS_ called 2 returned 100% blocks executed 59%
        2:   30:HashTable::HashTable(const HashTable& origin)
        2:   30-block  0
        -:   31:{
        2:   32:    size = origin.size;
        2:   33:    capacity = origin.capacity;
       10:   34:    table = new Table[capacity];
        2:   34-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:   34-block  1
unconditional  2 taken 2
    $$$$$:   34-block  2
unconditional  3 never executed
        2:   34-block  3
call    4 returned 2
unconditional  5 taken 2
       10:   34-block  4
branch  6 taken 8 (fallthrough)
branch  7 taken 2
        8:   34-block  5
call    8 returned 8
branch  9 taken 8 (fallthrough)
branch 10 taken 0 (throw)
        8:   34-block  6
unconditional 11 taken 8
    %%%%%:   34-block  7
unconditional 12 never executed
    %%%%%:   34-block  8
branch 13 never executed
branch 14 never executed
    %%%%%:   34-block  9
call   15 never executed
unconditional 16 never executed
    %%%%%:   34-block 10
unconditional 17 never executed
    %%%%%:   34-block 11
call   18 never executed
        2:   35:    std::copy(origin.table, origin.table + capacity, table);
        2:   35-block  0
call    0 returned 2
        2:   36:}
unconditional  0 taken 2
    %%%%%:   36-block  0
branch  1 never executed
branch  2 never executed
        -:   37:
function _ZN9HashTableD2Ev called 15 returned 100% blocks executed 100%
       15:   38:HashTable::~HashTable()
       15:   38-block  0
        -:   39:{
   264311:   40:    delete [] table;
       15:   40-block  0
branch  0 taken 15 (fallthrough)
branch  1 taken 0
       15:   40-block  1
unconditional  2 taken 15
   264311:   40-block  2
branch  3 taken 264296 (fallthrough)
branch  4 taken 15
   264296:   40-block  3
call    5 returned 264296
branch  6 taken 264296 (fallthrough)
branch  7 taken 0 (throw)
   264296:   40-block  4
unconditional  8 taken 264296
       15:   40-block  5
call    9 returned 15
unconditional 10 taken 15
       15:   41:}
       15:   41-block  0
unconditional  0 taken 15
        -:   42:
        -:   43:// Вставка в контейнер. Возвращаемое значение - успешность вставки.
function _ZN9HashTable6insertERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERK5Value called 205498 returned 100% blocks executed 94%
   205498:   44:bool HashTable::insert(const Key& key, const Value& value)
   205498:   44-block  0
        -:   45:{
        -:   46:    //cout << "INSERTING " << key << ' ' << value.age << ' ' << value.weight << endl;
   205498:   47:    if (true == search(key))
   205498:   47-block  0
call    0 returned 205498
branch  1 taken 1 (fallthrough)
branch  2 taken 205497
        -:   48:    {
        -:   49:        //cout << "FOUND" << endl;
        1:   50:        return false;
        1:   50-block  0
unconditional  0 taken 1
        -:   51:    }
        -:   52:    else
        -:   53:    {
        -:   54:        //cout << "NOT FOUND" << endl;
   205497:   55:        if (size + 1 >= capacity / 2) // if rehashing is needed
   205497:   55-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 205473
        -:   56:        {
       24:   57:            rehash();
       24:   57-block  0
call    0 returned 24
unconditional  1 taken 24
        -:   58:        }
   205497:   59:        size += 1;
   205497:   60:        int hash = gethash(key);
   205497:   60-block  0
call    0 returned 205497
call    1 returned 205497
branch  2 taken 205497 (fallthrough)
branch  3 taken 0 (throw)
   205497:   60-block  1
call    4 returned 205497
unconditional  5 taken 205497
    %%%%%:   60-block  2
call    6 never executed
   285043:   61:        while (true == table[hash%capacity].is_filled)
   285043:   61-block  0
branch  0 taken 79546 (fallthrough)
branch  1 taken 205497
    79546:   61-block  1
unconditional  2 taken 79546
        -:   62:        {
    79546:   63:            hash++;
        -:   64:        }
   205497:   65:        hash = hash%capacity;
        -:   66:        //cout << "hah " << hash <<  endl;
   205497:   67:        table[hash].key = key;
   205497:   67-block  0
call    0 returned 205497
   205497:   68:        table[hash].value.age = value.age;
   205497:   69:        table[hash].value.weight = value.weight;
   205497:   70:        table[hash].is_filled = true;
        -:   71:        //cout << "INSERTED" << endl;
   205498:   72:        return true;
unconditional  0 taken 205497
   205498:   72-block  0
unconditional  1 taken 205498
        -:   73:    }
        -:   74:}
        -:   75:
function _ZN9HashTable6rehashEv called 24 returned 100% blocks executed 73%
       24:   76:void HashTable::rehash()
       24:   76-block  0
        -:   77:{
   262216:   78:    Table * temp = new Table[capacity]; // creating temporary array of tables
       24:   78-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24:   78-block  1
unconditional  2 taken 24
    $$$$$:   78-block  2
unconditional  3 never executed
       24:   78-block  3
call    4 returned 24
unconditional  5 taken 24
   262216:   78-block  4
branch  6 taken 262192 (fallthrough)
branch  7 taken 24
   262192:   78-block  5
call    8 returned 262192
branch  9 taken 262192 (fallthrough)
branch 10 taken 0 (throw)
   262192:   78-block  6
unconditional 11 taken 262192
    %%%%%:   78-block  7
unconditional 12 never executed
    %%%%%:   78-block  8
branch 13 never executed
branch 14 never executed
    %%%%%:   78-block  9
call   15 never executed
unconditional 16 never executed
    %%%%%:   78-block 10
unconditional 17 never executed
    %%%%%:   78-block 11
call   18 never executed
call   19 never executed
    %%%%%:   78-block 12
branch 20 never executed
branch 21 never executed
       24:   79:    int current_ind = 0;
       24:   80:    std::copy(table, table + capacity, temp);
       24:   80-block  0
call    0 returned 24
   262216:   81:    for (int i = 0; i < capacity; ++i)
unconditional  0 taken 24
   262216:   81-block  0
branch  1 taken 262192 (fallthrough)
branch  2 taken 24
   262192:   81-block  1
unconditional  3 taken 262192
        -:   82:    {
   262192:   83:        if (true == table[i].is_filled)
   262192:   83-block  0
branch  0 taken 131072 (fallthrough)
branch  1 taken 131120
        -:   84:        {
        -:   85:            //cout << "TRY1 " << i << endl;
   131072:   86:            temp[current_ind].key = table[i].key;
   131072:   86-block  0
call    0 returned 131072
   131072:   87:            temp[current_ind].value.age = table[i].value.age;
   131072:   88:            temp[current_ind].value.weight = table[i].value.weight;
   131072:   89:            temp[current_ind].is_filled = true;
   131072:   90:            current_ind++;
unconditional  0 taken 131072
        -:   91:        }
        -:   92:    }
   262216:   93:    delete [] table; // deleting the old array of tables
       24:   93-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24:   93-block  1
unconditional  2 taken 24
   262216:   93-block  2
branch  3 taken 262192 (fallthrough)
branch  4 taken 24
   262192:   93-block  3
call    5 returned 262192
unconditional  6 taken 262192
       24:   93-block  4
call    7 returned 24
unconditional  8 taken 24
       24:   94:    capacity *= 2;  
   524408:   95:    table = new Table[capacity];
       24:   95-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24:   95-block  1
unconditional  2 taken 24
    $$$$$:   95-block  2
unconditional  3 never executed
       24:   95-block  3
call    4 returned 24
unconditional  5 taken 24
   524408:   95-block  4
branch  6 taken 524384 (fallthrough)
branch  7 taken 24
   524384:   95-block  5
call    8 returned 524384
branch  9 taken 524384 (fallthrough)
branch 10 taken 0 (throw)
   524384:   95-block  6
unconditional 11 taken 524384
    %%%%%:   95-block  7
unconditional 12 never executed
    %%%%%:   95-block  8
branch 13 never executed
branch 14 never executed
    %%%%%:   95-block  9
call   15 never executed
unconditional 16 never executed
    %%%%%:   95-block 10
unconditional 17 never executed
    %%%%%:   95-block 11
call   18 never executed
   524408:   96:    for (int i = 0; i < capacity; ++i)
       24:   96-block  0
unconditional  0 taken 24
   524408:   96-block  1
branch  1 taken 524384 (fallthrough)
branch  2 taken 24
unconditional  3 taken 524384
        -:   97:    {
   524384:   98:        table[i].is_filled = false;
   524384:   99:        table[i].key = " ";
   524384:   99-block  0
call    0 returned 524384
   524384:  100:        table[i].value.age = -1;
   524384:  101:        table[i].value.weight = -1;
        -:  102:    }
       24:  103:    int old_size = size;
       24:  104:    size = 0;
        -:  105:    
   131096:  106:    for (int i = 0; i < old_size; ++i)
       24:  106-block  0
unconditional  0 taken 24
   131096:  106-block  1
branch  1 taken 131072 (fallthrough)
branch  2 taken 24
unconditional  3 taken 131072
        -:  107:    {
   131072:  108:        insert(temp[i].key, temp[i].value);
   131072:  108-block  0
call    0 returned 131072
        -:  109:    }
   262216:  110:    delete [] temp;
       24:  110-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 0
       24:  110-block  1
unconditional  2 taken 24
   262216:  110-block  2
branch  3 taken 262192 (fallthrough)
branch  4 taken 24
   262192:  110-block  3
call    5 returned 262192
unconditional  6 taken 262192
       24:  110-block  4
call    7 returned 24
unconditional  8 taken 24
       24:  111:}
       24:  111-block  0
unconditional  0 taken 24
    %%%%%:  111-block  1
branch  1 never executed
branch  2 never executed
        -:  112:
        -:  113:// Проверка наличия значения по заданному ключу.
function _ZNK9HashTable6searchERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 279910 returned 100% blocks executed 93%
   279910:  114:bool HashTable::search(const Key& key) const
   279910:  114-block  0
        -:  115:{
   279910:  116:    if (0 == size)
   279910:  116-block  0
branch  0 taken 38 (fallthrough)
branch  1 taken 279872
        -:  117:    {
       38:  118:        return false;
       38:  118-block  0
unconditional  0 taken 38
        -:  119:    }
   279872:  120:    int hash = HashTable::gethash(key);
   279872:  120-block  0
call    0 returned 279872
call    1 returned 279872
branch  2 taken 279872 (fallthrough)
branch  3 taken 0 (throw)
   279872:  120-block  1
call    4 returned 279872
    %%%%%:  120-block  2
call    5 never executed
   279872:  121:    int current_ind = hash;
unconditional  0 taken 279872
   374252:  122:    while (true)
    94342:  122-block  0
unconditional  0 taken 94342
   279910:  122-block  1
unconditional  1 taken 279910
        -:  123:    {
   374214:  124:        if (false == table[current_ind].is_filled)
   374214:  124-block  0
branch  0 taken 205465 (fallthrough)
branch  1 taken 168749
        -:  125:        {
   205465:  126:            return false;
   205465:  126-block  0
unconditional  0 taken 205465
        -:  127:        }
        -:  128:        else
        -:  129:        {
   168749:  130:            if (table[current_ind].key == key)
   168749:  130-block  0
call    0 returned 168749
branch  1 taken 74407 (fallthrough)
branch  2 taken 94342
        -:  131:            {
    74407:  132:                return true;
    74407:  132-block  0
unconditional  0 taken 74407
        -:  133:            }
        -:  134:            else
        -:  135:            {
    94342:  136:                current_ind++;
    94342:  137:                current_ind = current_ind%capacity;
        -:  138:            }
        -:  139:        }
        -:  140:
        -:  141:    }
        -:  142:}
        -:  143:
function _ZNK9HashTable5printEv called 2 returned 100% blocks executed 88%
        2:  144:void HashTable::print() const
        2:  144-block  0
        -:  145:{
        2:  146:    if (0 == size)
        2:  146-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        -:  147:    {
    #####:  148:        std::cout << "Empty hashtable" << std::endl;
    $$$$$:  148-block  0
call    0 never executed
call    1 never executed
    #####:  149:        return;
unconditional  0 never executed
        -:  150:    }
        2:  151:    cout << "HashTable size : " << size <<  endl << "HashTable capacity : " << capacity << endl;
        2:  151-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
call    4 returned 2
call    5 returned 2
       50:  152:    for (int i = 0; i < capacity; ++i)
unconditional  0 taken 2
       50:  152-block  0
branch  1 taken 48 (fallthrough)
branch  2 taken 2
       48:  152-block  1
unconditional  3 taken 48
        -:  153:    {
       48:  154:        if (true == table[i].is_filled)
       48:  154-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 36
        -:  155:        {
       12:  156:            cout << "Table number " << i << ", name " << table[i].key << ", age " << table[i].value.age << ", weight " << table[i].value.weight << endl;
       12:  156-block  0
call    0 returned 12
call    1 returned 12
call    2 returned 12
call    3 returned 12
call    4 returned 12
call    5 returned 12
call    6 returned 12
call    7 returned 12
call    8 returned 12
unconditional  9 taken 12
        -:  157:        }
        -:  158:    }
        2:  159:    cout << endl << endl;
        2:  159-block  0
call    0 returned 2
call    1 returned 2
unconditional  2 taken 2
        -:  160:}
        -:  161:
        -:  162:// Обменивает значения двух хэш-таблиц.
        -:  163:// Подумайте, зачем нужен этот метод, при наличии стандартной функции
        -:  164:// std::swap.
function _ZN9HashTable4swapERS_ called 0 returned 0% blocks executed 0%
    #####:  165:void HashTable::swap(HashTable& origin)
    $$$$$:  165-block  0
        -:  166:{
    #####:  167:    HashTable & temp = origin;//???????????????????????
    #####:  168:    origin = *this;
    $$$$$:  168-block  0
call    0 never executed
    #####:  169:    *this = temp;
call    0 never executed
    #####:  170:}
        -:  171:
function _ZN9HashTableaSERKS_ called 1 returned 100% blocks executed 78%
        1:  172:HashTable& HashTable::operator=(const HashTable& origin)
        1:  172-block  0
        -:  173:{
        1:  174:    if (this != &origin)
        1:  174-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  175:    {
        1:  176:        size = origin.size;
        1:  177:        capacity = origin.capacity;
        5:  178:        delete [] table;
        1:  178-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  178-block  1
unconditional  2 taken 1
        5:  178-block  2
branch  3 taken 4 (fallthrough)
branch  4 taken 1
        4:  178-block  3
call    5 returned 4
unconditional  6 taken 4
        1:  178-block  4
call    7 returned 1
unconditional  8 taken 1
        -:  179:        //table = new Table[capacity];
     2049:  180:        table = new Table[capacity];
        1:  180-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  180-block  1
unconditional  2 taken 1
    $$$$$:  180-block  2
unconditional  3 never executed
        1:  180-block  3
call    4 returned 1
unconditional  5 taken 1
     2049:  180-block  4
branch  6 taken 2048 (fallthrough)
branch  7 taken 1
     2048:  180-block  5
call    8 returned 2048
branch  9 taken 2048 (fallthrough)
branch 10 taken 0 (throw)
     2048:  180-block  6
unconditional 11 taken 2048
    %%%%%:  180-block  7
unconditional 12 never executed
    %%%%%:  180-block  8
branch 13 never executed
branch 14 never executed
    %%%%%:  180-block  9
call   15 never executed
unconditional 16 never executed
    %%%%%:  180-block 10
unconditional 17 never executed
    %%%%%:  180-block 11
call   18 never executed
        -:  181:
        -:  182:        
     2049:  183:        for (int i = 0; i < capacity; ++i)
        1:  183-block  0
unconditional  0 taken 1
     2049:  183-block  1
branch  1 taken 2048 (fallthrough)
branch  2 taken 1
     2048:  183-block  2
unconditional  3 taken 2048
        1:  183-block  3
unconditional  4 taken 1
        -:  184:        {
     2048:  185:            if (true == origin.table[i].is_filled)
     2048:  185-block  0
branch  0 taken 1000 (fallthrough)
branch  1 taken 1048
        -:  186:            {
     1000:  187:                table[i].key = origin.table[i].key;
     1000:  187-block  0
call    0 returned 1000
     1000:  188:                table[i].value.age = origin.table[i].value.age;
     1000:  189:                table[i].value.weight = origin.table[i].value.weight;
     1000:  190:                table[i].is_filled = true;
unconditional  0 taken 1000
        -:  191:            }
        -:  192:            else
        -:  193:            {
     1048:  194:                table[i].key = " ";
     1048:  194-block  0
call    0 returned 1048
     1048:  195:                table[i].value.age = -1;
     1048:  196:                table[i].value.weight = -1;
     1048:  197:                table[i].is_filled = false;
unconditional  0 taken 1048
        -:  198:            }
        -:  199:        }
        -:  200:
        -:  201:    }
        1:  202:    return *this;
        1:  202-block  0
unconditional  0 taken 1
        1:  202-block  1
unconditional  1 taken 1
    %%%%%:  202-block  2
branch  2 never executed
branch  3 never executed
        -:  203:}
        -:  204:
        -:  205:// Очищает контейнер.
function _ZN9HashTable5clearEv called 0 returned 0% blocks executed 0%
    #####:  206:void HashTable::clear()
    $$$$$:  206-block  0
        -:  207:{
        -:  208:    
    #####:  209:    for (int i = 0; i < capacity; ++i)
    $$$$$:  209-block  0
unconditional  0 never executed
    $$$$$:  209-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  209-block  2
unconditional  3 never executed
        -:  210:    {
    #####:  211:        if (true == table[i].is_filled)
    $$$$$:  211-block  0
branch  0 never executed
branch  1 never executed
        -:  212:        {
    #####:  213:            table[i].is_filled = false;
    #####:  214:            table[i].key = " ";
    $$$$$:  214-block  0
call    0 never executed
    #####:  215:            table[i].value.age = -1;
    #####:  216:            table[i].value.weight = -1;
unconditional  0 never executed
        -:  217:        }
        -:  218:    }
    #####:  219:    size = 0;
    #####:  220:    capacity = START_CAPACITY;
    #####:  221:}
        -:  222:
        -:  223:// Удаляет элемент по заданному ключу.
function _ZN9HashTable5eraseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 3 returned 100% blocks executed 79%
        3:  224:bool HashTable::erase(const Key& k)
        3:  224-block  0
        -:  225:{
        3:  226:    int i = HashTable::gethash(k);
        3:  226-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:  226-block  1
call    4 returned 3
unconditional  5 taken 3
    %%%%%:  226-block  2
call    6 never executed
        3:  227:    while (true == table[i].is_filled)
        3:  227-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
    $$$$$:  227-block  1
unconditional  2 never executed
        -:  228:    {
        3:  229:        if (k == table[i].key)
        3:  229-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0
        -:  230:        {
        3:  231:            size--;
        3:  232:            table[i].key = " ";
        3:  232-block  0
call    0 returned 3
        3:  233:            table[i].value.age = -1;
        3:  234:            table[i].value.weight = -1;
        3:  235:            table[i].is_filled = false;
        3:  236:            return true;
unconditional  0 taken 3
        -:  237:        }
    #####:  238:        ++i;
    #####:  239:        i = i%capacity;
        -:  240:    }
        3:  241:    return false;
    $$$$$:  241-block  0
unconditional  0 never executed
        3:  241-block  1
unconditional  1 taken 3
        -:  242:}
        -:  243:
function _ZNK9HashTable7getsizeEv called 4 returned 100% blocks executed 100%
        4:  244:int HashTable::getsize() const
        4:  244-block  0
        -:  245:{
        4:  246:    return size;
        4:  246-block  0
unconditional  0 taken 4
        -:  247:}
        -:  248:
function _ZNK9HashTable11getcapacityEv called 3 returned 100% blocks executed 100%
        3:  249:int HashTable::getcapacity() const
        3:  249-block  0
        -:  250:{
        3:  251:    return capacity;
        3:  251-block  0
unconditional  0 taken 3
        -:  252:}
        -:  253:
function _ZNK9HashTable5emptyEv called 6 returned 100% blocks executed 100%
        6:  254:bool HashTable::empty() const
        6:  254-block  0
        -:  255:{
       21:  256:    for (int i = 0; i < capacity; ++i)
        6:  256-block  0
unconditional  0 taken 6
       21:  256-block  1
branch  1 taken 18 (fallthrough)
branch  2 taken 3
       15:  256-block  2
unconditional  3 taken 15
        -:  257:    {
       18:  258:        if (true == table[i].is_filled)
       18:  258-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 15
        -:  259:        {
        3:  260:            return false;
        3:  260-block  0
unconditional  0 taken 3
        -:  261:        }
        -:  262:    }
        3:  263:    return true;
        3:  263-block  0
unconditional  0 taken 3
        -:  264:}
        -:  265:
        -:  266:// Возвращает значение по ключу. Бросает исключение при неудаче.
function _ZN9HashTable2atERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2 returned 50% blocks executed 87%
        2:  267:Value& HashTable::at(const Key& k)
        2:  267-block  0
        -:  268:{
        2:  269:    if (false == HashTable::search(k))
        2:  269-block  0
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        -:  270:    {
        -:  271:        /*Value * temp = new Value;
        -:  272:        temp->age = 0;
        -:  273:        temp->weight = 0;
        -:  274:        return *temp;*/ // ------------------ Hashtest "At" failed with this code
        1:  275:        throw -1;
        1:  275-block  0
call    0 returned 1
call    1 returned 0
        -:  276:    }
        -:  277:    else
        -:  278:    {
        1:  279:        int hash = HashTable::gethash(k);
        1:  279-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  279-block  1
call    4 returned 1
unconditional  5 taken 1
    %%%%%:  279-block  2
call    6 never executed
        1:  280:        while (table[hash].key != k)
        1:  280-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:  280-block  1
unconditional  3 never executed
        -:  281:        {
    #####:  282:            hash++;
    #####:  283:            hash = hash % capacity;
        -:  284:        }
        1:  285:        Value & result = table[hash].value;
        1:  286:        return result;
        1:  286-block  0
unconditional  0 taken 1
        1:  286-block  1
unconditional  1 taken 1
        -:  287:    }
        -:  288:}
        -:  289:
        -:  290:// Возвращает значение по ключу. Небезопасный метод.
        -:  291:// В случае отсутствия ключа в контейнере следует вставить в контейнер
        -:  292:// значение, созданное конструктором по умолчанию и вернуть ссылку на него. 
function _ZN9HashTableixERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2 returned 100% blocks executed 82%
        2:  293:Value& HashTable::operator[](const Key& k)
        2:  293-block  0
        -:  294:{
        2:  295:    if (false == HashTable::search(k))
        2:  295-block  0
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        -:  296:    {
        1:  297:        int i = 0;
        1:  297-block  0
unconditional  0 taken 1
        1:  298:        while (true == table[i].is_filled)
        1:  298-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$:  298-block  1
unconditional  2 never executed
        -:  299:        {
    #####:  300:            ++i;
    #####:  301:            i = i % capacity;
        -:  302:        }
        1:  303:        table[i].value.age = -1;
        1:  304:        table[i].value.weight = -1;
        1:  305:        Value & result = table[i].value;
        1:  306:        return result;
        1:  306-block  0
unconditional  0 taken 1
        -:  307:    }
        -:  308:    else
        -:  309:    {
        1:  310:        int hash = HashTable::gethash(k);
        1:  310-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  310-block  1
call    4 returned 1
unconditional  5 taken 1
    %%%%%:  310-block  2
call    6 never executed
        1:  311:        while (table[hash].key != k)
        1:  311-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:  311-block  1
unconditional  3 never executed
        -:  312:        {
    #####:  313:            hash++;
    #####:  314:            hash = hash % capacity;
        -:  315:        }
        1:  316:        Value & result = table[hash].value;
        2:  317:        return result;
        1:  317-block  0
unconditional  0 taken 1
        2:  317-block  1
unconditional  1 taken 2
        -:  318:    }
        -:  319:}
        -:  320:
function _ZNK9HashTable2atERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 73%
        1:  321:const Value& HashTable::at(const Key& k) const
        1:  321-block  0
        -:  322:{
        1:  323:    if (false == HashTable::search(k))
        1:  323-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
        -:  324:    {
        -:  325:        /*Value * temp = new Value;
        -:  326:        temp->age = 0;
        -:  327:        temp->weight = 0;
        -:  328:        return *temp;*/
    #####:  329:        throw -1;
    $$$$$:  329-block  0
call    0 never executed
call    1 never executed
        -:  330:    }
        -:  331:    else
        -:  332:    {
        1:  333:        int hash = HashTable::gethash(k);
        1:  333-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  333-block  1
call    4 returned 1
unconditional  5 taken 1
    %%%%%:  333-block  2
call    6 never executed
        1:  334:        while (table[hash].key != k)
        1:  334-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:  334-block  1
unconditional  3 never executed
        -:  335:        {
    #####:  336:            hash++;
    #####:  337:            hash = hash % capacity;
        -:  338:        }
        1:  339:        const Value & result = table[hash].value;
        1:  340:        return result;
        1:  340-block  0
unconditional  0 taken 1
        1:  340-block  1
unconditional  1 taken 1
        -:  341:    }
function _GLOBAL__sub_I__ZNK9HashTable7gethashENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
        4:  342:}
        1:  342-block  0
        1:  342-block  1
call    0 returned 1
        1:  342-block  2
        1:  342-block  3
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  342-block  4
branch  3 taken 1 (fallthrough)
branch  4 taken 0
        -:  343:
        -:  344:
        -:  345:
        -:  346:
